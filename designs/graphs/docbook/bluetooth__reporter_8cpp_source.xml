<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bluetooth__reporter_8cpp_source" xml:lang="en-US">
<title>bluetooth_reporter.cpp</title>
<indexterm><primary>bgeigiezen_firmware/handlers/bluetooth_reporter.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_bluetooth__reporter_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;Arduino.h&gt;</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00002"/>00002 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_bluetooth__reporter_8h">bluetooth_reporter.h</link>&quot;</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_debugger_8h">debugger.h</link>&quot;</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_identifiers_8h">identifiers.h</link>&quot;</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00006"/>00006 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00007"/><link linkend="_class_bluetooth_reporter_1a5c2b08bae1ddb5845d6f90d81712deea">00007</link> <link linkend="_class_bluetooth_reporter_1a5c2b08bae1ddb5845d6f90d81712deea">BluetoothReporter::BluetoothReporter</link>(<link linkend="_class_local_storage">LocalStorage</link>&amp;&#32;config)&#32;:
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;Handler(),
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;config(config),
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;_pServer(nullptr),
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;pDataRXCharacteristic(nullptr)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00012"/>00012 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00013"/>00013 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00014"/><link linkend="_class_bluetooth_reporter_1a365b2431527d3601eca8f9349f73053a">00014</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_bluetooth_reporter_1a365b2431527d3601eca8f9349f73053a">BluetoothReporter::activate</link>(<emphasis role="keywordtype">bool</emphasis>)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00015"/>00015 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00016"/>00016 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!config.<link linkend="_class_local_storage_1a21a006de02dc8ab7f3a47aafeb894f65">get_device_id</link>())&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<link linkend="_debugger_8h_1a4f1aa9c2cc46934abb3416f96222cc40">DEBUG_PRINTLN</link>(<emphasis role="stringliteral">&quot;Cannot&#32;initialize&#32;bluetooth&#32;without&#32;device&#32;id&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00019"/>00019 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00020"/>00020 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(BLEDevice::getInitialized())&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Already&#32;initialized</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;_pServer-&gt;getAdvertising()-&gt;start();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00024"/>00024 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00025"/>00025 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00026"/>00026 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;deviceName[16];
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00027"/>00027 &#32;&#32;sprintf(deviceName,&#32;<emphasis role="stringliteral">&quot;bGeigie%d&quot;</emphasis>,&#32;config.<link linkend="_class_local_storage_1a21a006de02dc8ab7f3a47aafeb894f65">get_device_id</link>());
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00028"/>00028 &#32;&#32;BLEDevice::init(deviceName);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00029"/>00029 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00030"/>00030 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!_pServer)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;_pServer&#32;=&#32;BLEDevice::createServer();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00032"/>00032 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;create_ble_profile_service(_pServer);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;create_ble_device_service(_pServer);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;create_ble_data_service(_pServer);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00036"/>00036 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00037"/>00037 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00038"/>00038 &#32;&#32;BLEAdvertising*&#32;pAdvertising&#32;=&#32;BLEDevice::getAdvertising();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00039"/>00039 &#32;&#32;pAdvertising-&gt;addServiceUUID(<link linkend="_bluetooth__settings_8h_1a90a3ef3bd58a248e476f1f3be3ddbb52">SERVICE_PROFILE_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00040"/>00040 &#32;&#32;pAdvertising-&gt;addServiceUUID(<link linkend="_bluetooth__settings_8h_1a5250794891dcef66de810c415423b99c">SERVICE_DEVICE_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00041"/>00041 &#32;&#32;pAdvertising-&gt;addServiceUUID(<link linkend="_bluetooth__settings_8h_1affd01cdf182aa884be43d5db5a742a6c">SERVICE_DATA_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00042"/>00042 &#32;&#32;pAdvertising-&gt;setScanResponse(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00043"/>00043 &#32;&#32;pAdvertising-&gt;setMinPreferred(0x06);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00044"/>00044 &#32;&#32;pAdvertising-&gt;setMinPreferred(0x12);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00045"/>00045 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00046"/>00046 &#32;&#32;BLEDevice::startAdvertising();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00047"/>00047 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00048"/>00048 &#32;&#32;<link linkend="_debugger_8h_1a01e7feab704802b5523d4bf0054f0b61">DEBUG_PRINTF</link>(<emphasis role="stringliteral">&quot;Bluetooth&#32;initialized,&#32;device:&#32;%s&quot;</emphasis>,&#32;deviceName);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00049"/>00049 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;BLEDevice::getInitialized();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00050"/>00050 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00051"/>00051 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00052"/><link linkend="_class_bluetooth_reporter_1a220046266dc3778677bca52b868e5471">00052</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_bluetooth_reporter_1a220046266dc3778677bca52b868e5471">BluetoothReporter::deactivate</link>()&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00053"/>00053 &#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;peerDevice&#32;:&#32;BLEDevice::getPeerDevices(<emphasis role="keyword">true</emphasis>))&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;_pServer-&gt;disconnect(peerDevice.first);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00055"/>00055 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00056"/>00056 &#32;&#32;delay(10);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00057"/>00057 &#32;&#32;_pServer-&gt;getAdvertising()-&gt;stop();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00059"/>00059 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00060"/><link linkend="_class_bluetooth_reporter_1a401eb1211e8bc88e281c5a61415e72af">00060</link> int8_t&#32;<link linkend="_class_bluetooth_reporter_1a401eb1211e8bc88e281c5a61415e72af">BluetoothReporter::handle_produced_work</link>(<emphasis role="keyword">const</emphasis>&#32;worker_map_t&amp;&#32;workers)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00061"/>00061 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;logData&#32;=&#32;workers.worker&lt;<link linkend="_class_log_aggregator">LogAggregator</link>&gt;(<link linkend="_identifiers_8h_1a817945491edcfa653f61f26e522cd76fa40dd481c8643b09aff483e9f4f7c2006">k_worker_log_aggregator</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00062"/>00062 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(!logData-&gt;is_fresh())&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_pServer-&gt;getConnectedCount()&#32;&gt;&#32;0&#32;?&#32;<link linkend="_class_bluetooth_reporter_1a023b2a81babe7fb7b929b1fb63e513efad7fa083c0e4d8cbe9a7277581a37732c">e_handler_clients_available</link>&#32;:&#32;Status::e_handler_idle;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00064"/>00064 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00065"/>00065 &#32;&#32;<emphasis role="comment">//&#32;Fresh&#32;reading&#32;is&#32;produced</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00066"/>00066 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;reading&#32;=&#32;logData-&gt;get_data();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00067"/>00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;send(reading)&#32;?&#32;Status::e_handler_clients_available&#32;:&#32;Status::e_handler_no_clients;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00068"/>00068 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00069"/>00069 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00070"/>00070 <emphasis role="keywordtype">void</emphasis>&#32;BluetoothReporter::create_ble_profile_service(BLEServer*&#32;pServer)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00071"/>00071 &#32;&#32;BLEService*&#32;pProfileService&#32;=&#32;pServer-&gt;createService(<link linkend="_bluetooth__settings_8h_1a90a3ef3bd58a248e476f1f3be3ddbb52">SERVICE_PROFILE_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00072"/>00072 &#32;&#32;BLECharacteristic*&#32;pProfileNameCharacteristic&#32;=&#32;pProfileService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a5cb5232a755401b676ca4226bfbc630c">CHARACTERISTIC_PROFILE_NAME_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00075"/>00075 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00076"/>00076 &#32;&#32;<emphasis role="comment">/*BLECharacteristic*&#32;pProfileAppearanceCharacteristic&#32;=&#32;*/</emphasis>pProfileService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a21a88651f42a8a7478c80233ce1fa09a">CHARACTERISTIC_PROFILE_APPEARANCE_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00079"/>00079 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00080"/>00080 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00081"/>00081 &#32;&#32;pProfileNameCharacteristic-&gt;setValue(<link linkend="_bluetooth__settings_8h_1ab154e3d90168b1e072abf1bc47e3f834">BLE_PROFILE_NAME</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00082"/>00082 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00083"/>00083 &#32;&#32;pProfileService-&gt;start();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00084"/>00084 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00085"/>00085 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00086"/>00086 <emphasis role="keywordtype">void</emphasis>&#32;BluetoothReporter::create_ble_device_service(BLEServer*&#32;pServer)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00087"/>00087 &#32;&#32;BLEService*&#32;pDeviceService&#32;=&#32;pServer-&gt;createService(<link linkend="_bluetooth__settings_8h_1a5250794891dcef66de810c415423b99c">SERVICE_DEVICE_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00088"/>00088 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00089"/>00089 &#32;&#32;<emphasis role="comment">//&#32;Manufacturer&#32;name</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00090"/>00090 &#32;&#32;BLECharacteristic*&#32;pDeviceManufacturerCharacteristic&#32;=&#32;pDeviceService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1ac61d2647caedf5bd2489844ca9e4765c">CHARACTERISTIC_DEVICE_MANUFACTURER_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00093"/>00093 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00094"/>00094 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorManufacturer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00095"/>00095 &#32;&#32;pDescriptorManufacturer-&gt;setValue(<emphasis role="stringliteral">&quot;Manufacturer&#32;Name&#32;String&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00096"/>00096 &#32;&#32;pDeviceManufacturerCharacteristic-&gt;addDescriptor(pDescriptorManufacturer);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00097"/>00097 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00098"/>00098 &#32;&#32;<emphasis role="comment">//&#32;Model&#32;number</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00099"/>00099 &#32;&#32;BLECharacteristic*&#32;pDeviceModelCharacteristic&#32;=&#32;pDeviceService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a3196ee0950589226e460597e04c5da13">CHARACTERISTIC_DEVICE_MODEL_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00102"/>00102 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00103"/>00103 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorModel&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00104"/>00104 &#32;&#32;pDescriptorModel-&gt;setValue(<emphasis role="stringliteral">&quot;Model&#32;Number&#32;String&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00105"/>00105 &#32;&#32;pDeviceModelCharacteristic-&gt;addDescriptor(pDescriptorModel);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00106"/>00106 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00107"/>00107 &#32;&#32;<emphasis role="comment">//&#32;Firmware&#32;revision</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00108"/>00108 &#32;&#32;BLECharacteristic*&#32;pDeviceFirmwareCharacteristic&#32;=&#32;pDeviceService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a310f01ca63431c35e6c4e002d975ab88">CHARACTERISTIC_DEVICE_FIRMWARE_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00111"/>00111 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00112"/>00112 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorFirmware&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00113"/>00113 &#32;&#32;pDescriptorFirmware-&gt;setValue(<emphasis role="stringliteral">&quot;Firmware&#32;Revision&#32;String&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00114"/>00114 &#32;&#32;pDeviceFirmwareCharacteristic-&gt;addDescriptor(pDescriptorFirmware);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00115"/>00115 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00116"/>00116 &#32;&#32;<emphasis role="comment">//&#32;Hardware&#32;revision</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00117"/>00117 &#32;&#32;BLECharacteristic*&#32;pDeviceRevisionCharacteristic&#32;=&#32;pDeviceService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a173552332550777bd3c1e9f50c893fe1">CHARACTERISTIC_DEVICE_REVISION_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00120"/>00120 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00121"/>00121 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorHardware&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00122"/>00122 &#32;&#32;pDescriptorHardware-&gt;setValue(<emphasis role="stringliteral">&quot;Hardware&#32;Revision&#32;String&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00123"/>00123 &#32;&#32;pDeviceRevisionCharacteristic-&gt;addDescriptor(pDescriptorHardware);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00124"/>00124 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00125"/>00125 &#32;&#32;pDeviceManufacturerCharacteristic-&gt;setValue(<link linkend="_bluetooth__settings_8h_1a27a1dcdc78d6e3428cbb87a3f4a5099e">BLE_DEVICE_INFO_MANUFACTURER</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00126"/>00126 &#32;&#32;pDeviceModelCharacteristic-&gt;setValue(<link linkend="_bluetooth__settings_8h_1aed9fb2a82708a94b08eae9af058c3464">BLE_DEVICE_INFO_MODEL</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00127"/>00127 &#32;&#32;pDeviceFirmwareCharacteristic-&gt;setValue(<link linkend="_bluetooth__settings_8h_1a811d72a5d1679c378be10fcf9218cb2a">BLE_DEVICE_INFO_FIRMWARE_REVISION</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00128"/>00128 &#32;&#32;pDeviceRevisionCharacteristic-&gt;setValue(<link linkend="_bluetooth__settings_8h_1a9c45a4a0a556a1fc53f05d4b45d5851b">BLE_DEVICE_INFO_HARDWARE_REVISION</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00129"/>00129 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00130"/>00130 &#32;&#32;pDeviceService-&gt;start();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00131"/>00131 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00132"/>00132 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00133"/>00133 <emphasis role="keywordtype">void</emphasis>&#32;BluetoothReporter::create_ble_data_service(BLEServer*&#32;pServer)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00134"/>00134 &#32;&#32;BLEService*&#32;pDataService&#32;=&#32;pServer-&gt;createService(<link linkend="_bluetooth__settings_8h_1affd01cdf182aa884be43d5db5a742a6c">SERVICE_DATA_UUID</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00135"/>00135 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00136"/>00136 &#32;&#32;<emphasis role="comment">//&#32;DB&#32;Addr</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00137"/>00137 &#32;&#32;BLECharacteristic*&#32;pDataDBAddrCharacteristic&#32;=&#32;pDataService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a797689b683ef8b5eb602232e73553070">CHARACTERISTIC_DATA_BDADDR_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00140"/>00140 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00141"/>00141 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorAddr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00142"/>00142 &#32;&#32;pDescriptorAddr-&gt;setValue(<emphasis role="stringliteral">&quot;DB-Addr&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00143"/>00143 &#32;&#32;pDataDBAddrCharacteristic-&gt;addDescriptor(pDescriptorAddr);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00144"/>00144 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00145"/>00145 &#32;&#32;<emphasis role="comment">//&#32;Baudrate</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00146"/>00146 &#32;&#32;BLECharacteristic*&#32;pDataBaudCharacteristic&#32;=&#32;pDataService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1a83195297eba0885643c34be60cee1c79">CHARACTERISTIC_DATA_BAUD_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ&#32;|&#32;BLECharacteristic::PROPERTY_WRITE
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00149"/>00149 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00150"/>00150 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorBaud&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00151"/>00151 &#32;&#32;pDescriptorBaud-&gt;setValue(<emphasis role="stringliteral">&quot;Baudrate&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00152"/>00152 &#32;&#32;pDataBaudCharacteristic-&gt;addDescriptor(pDescriptorBaud);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00153"/>00153 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00154"/>00154 &#32;&#32;<emphasis role="comment">//&#32;RX</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00155"/>00155 &#32;&#32;pDataRXCharacteristic&#32;=&#32;pDataService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1af77cea89f6d779be568e67b03d385bc5">CHARACTERISTIC_DATA_RX_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ&#32;|&#32;BLECharacteristic::PROPERTY_NOTIFY
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00158"/>00158 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00159"/>00159 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorRX&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00160"/>00160 &#32;&#32;pDescriptorRX-&gt;setValue(<emphasis role="stringliteral">&quot;RX&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00161"/>00161 &#32;&#32;pDataRXCharacteristic-&gt;addDescriptor(pDescriptorRX);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00162"/>00162 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorRXNotifications&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2902);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00163"/>00163 &#32;&#32;pDescriptorRXNotifications-&gt;setValue(<emphasis role="stringliteral">&quot;Notifications&#32;and&#32;indications&#32;disabled&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00164"/>00164 &#32;&#32;pDataRXCharacteristic-&gt;addDescriptor(pDescriptorRXNotifications);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00165"/>00165 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00166"/>00166 &#32;&#32;<emphasis role="comment">//&#32;TX</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00167"/>00167 &#32;&#32;BLECharacteristic*&#32;pDataTXCharacteristic&#32;=&#32;pDataService-&gt;createCharacteristic(
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_bluetooth__settings_8h_1aa24574c6c21e93db279e78f8c50fa51b">CHARACTERISTIC_DATA_TX_UUID</link>,
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;BLECharacteristic::PROPERTY_READ&#32;|&#32;BLECharacteristic::PROPERTY_WRITE&#32;|&#32;BLECharacteristic::PROPERTY_WRITE_NR
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00170"/>00170 &#32;&#32;);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00171"/>00171 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BLEDescriptor*&#32;pDescriptorTX&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;BLEDescriptor((uint16_t)&#32;0x2901);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00172"/>00172 &#32;&#32;pDescriptorTX-&gt;setValue(<emphasis role="stringliteral">&quot;TX&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00173"/>00173 &#32;&#32;pDataTXCharacteristic-&gt;addDescriptor(pDescriptorTX);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00174"/>00174 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00175"/>00175 &#32;&#32;pDataDBAddrCharacteristic-&gt;setValue(addr,&#32;<link linkend="_bluetooth__settings_8h_1a041eba1dcd086f9b96f1276a20f0ff46">BLE_DATA_ADDR_SIZE</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00176"/>00176 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00177"/>00177 &#32;&#32;pDataService-&gt;start();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00178"/>00178 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00179"/>00179 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00180"/>00180 <emphasis role="keywordtype">bool</emphasis>&#32;BluetoothReporter::send(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_data_line">DataLine</link>&amp;&#32;reading)<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00181"/>00181 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(_pServer-&gt;getConnectedCount()&#32;==&#32;0)&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;clients&#32;to&#32;send&#32;data&#32;to</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00184"/>00184 &#32;&#32;}
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00185"/>00185 &#32;&#32;<link linkend="_debugger_8h_1a4f1aa9c2cc46934abb3416f96222cc40">DEBUG_PRINTLN</link>(<emphasis role="stringliteral">&quot;Sending&#32;reading&#32;over&#32;Bluetooth&quot;</emphasis>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00186"/>00186 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;strlen(reading.<link linkend="_struct_data_line_1a45cee5eda819375c48082a67910e2c0d">log_string</link>);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00187"/>00187 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00188"/>00188 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;segment&#32;=&#32;0;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00189"/>00189 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint8_t&#32;max_segment_size&#32;=&#32;20;&#32;<emphasis role="comment">//&#32;Max&#32;that&#32;can&#32;be&#32;sent&#32;over&#32;bluetooth</emphasis>
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00190"/>00190 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;++segment;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;uint8_t&#32;segment_size&#32;=&#32;segment&#32;*&#32;max_segment_size&#32;&gt;&#32;size&#32;?&#32;size&#32;%&#32;max_segment_size&#32;:&#32;max_segment_size;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;to_send[segment_size];
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;strncpy(to_send,&#32;reading.<link linkend="_struct_data_line_1a45cee5eda819375c48082a67910e2c0d">log_string</link>&#32;+&#32;((segment&#32;-&#32;1)&#32;*&#32;max_segment_size),&#32;segment_size);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00195"/>00195 
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;pDataRXCharacteristic-&gt;setValue((uint8_t*)&#32;to_send,&#32;segment_size);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;pDataRXCharacteristic-&gt;notify();
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00198"/>00198 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(segment&#32;*&#32;max_segment_size&#32;&lt;&#32;size);
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00199"/>00199 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00200"/>00200 }
<anchor xml:id="_bluetooth__reporter_8cpp_source_1l00201"/>00201 
</programlisting></section>
